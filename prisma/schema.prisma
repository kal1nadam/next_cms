generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")

}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  passwordHash  String
  createdAt DateTime @default(now())
  accounts     Account[]
  sessions     Session[]
  articles     Article[]
}

// Model for storing OAuth and credentials provider accounts
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model for database sessions when using the "database" session strategy
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Optional: Model for verification tokens (useful if you implement email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Article model with a many-to-many relation to Tag
model Article {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  slug       String   @unique
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tags       Tag[]    @relation("ArticleTags")
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
}

// Tag model with relation back to Article
model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleTags")
}